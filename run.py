# =================================================================================
#  VIDEO ARCHIVE BOT (GitHub Actions Edition)
#  –í–µ—Ä—Å–∏—è: 2.0 (—Å —Ñ—É–Ω–∫—Ü–∏–µ–π "–ê–Ω—Ç–∏—Å–ø–æ–π–ª–µ—Ä")
# =================================================================================

import os
import json
import subprocess
import feedparser
from telegram import Bot
import asyncio
import time
import pytesseract
from PIL import Image
import google.generativeai as genai
import re

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
YOUTUBE_CHANNEL_URL = "https://www.youtube.com/feeds/videos.xml?channel_id=UCAvrIl6ltV8MdJo3mV4Nl4Q"
TEMP_FOLDER = 'temp_videos'
DB_FILE = 'videos.json'
MAX_VIDEOS_ENTRIES = 25
CHUNK_DURATION_SECONDS = 600
COOKIE_FILE = 'cookies.txt'
OCR_DURATION_SECONDS = 45 # –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤–∏–¥–µ–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–ø–æ–π–ª–µ—Ä—ã

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Secrets ---
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
CHANNEL_ID = os.environ.get('TELEGRAM_CHANNEL_ID')
YOUTUBE_COOKIES_DATA = os.environ.get('YOUTUBE_COOKIES')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Gemini
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def get_video_db():
    if os.path.exists(DB_FILE):
        with open(DB_FILE, 'r') as f: return json.load(f)
    return []

def save_video_db(db):
    with open(DB_FILE, 'w') as f: json.dump(db, f, indent=4)

async def upload_to_telegram(filepath, title):
    print(f"  > –ó–∞–≥—Ä—É–∂–∞—é {os.path.basename(filepath)} –≤ Telegram...")
    bot = Bot(token=BOT_TOKEN)
    try:
        with open(filepath, 'rb') as video_file:
            message = await bot.send_video(chat_id=CHANNEL_ID, video=video_file, caption=title, read_timeout=300, write_timeout=300, connect_timeout=300)
        await bot.shutdown()
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
        return message.video.file_id
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Telegram: {e}")
        await bot.shutdown()
        return None

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø "–ê–ù–¢–ò–°–ü–û–ô–õ–ï–†" ---
def find_spoiler_time(video_filepath):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä—ã, —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏—â–µ—Ç —Ç–∞–π–º–∫–æ–¥ —Å–ø–æ–π–ª–µ—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é Gemini."""
    print(f"  > [–ê–Ω—Ç–∏—Å–ø–æ–π–ª–µ—Ä] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–µ—Ä–≤—ã–µ {OCR_DURATION_SECONDS} —Å–µ–∫—É–Ω–¥ –≤–∏–¥–µ–æ...")
    frames_folder = os.path.join(TEMP_FOLDER, 'frames')
    if not os.path.exists(frames_folder): os.makedirs(frames_folder)

    try:
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä—ã (1 –∫–∞–¥—Ä –≤ —Å–µ–∫—É–Ω–¥—É)
        subprocess.run(
            ['ffmpeg', '-i', video_filepath, '-ss', '0', '-t', str(OCR_DURATION_SECONDS), '-vf', 'fps=1', os.path.join(frames_folder, 'frame-%03d.png')],
            check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )
        
        # 2. –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤—Å–µ—Ö –∫–∞–¥—Ä–∞—Ö
        all_text = ""
        frame_files = sorted([f for f in os.listdir(frames_folder) if f.endswith('.png')])
        for frame_file in frame_files:
            try:
                text = pytesseract.image_to_string(Image.open(os.path.join(frames_folder, frame_file)), lang='rus+eng')
                if text.strip():
                    all_text += text.strip().lower().replace('\n', ' ') + " | "
            except Exception:
                continue # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞–¥—Ä–∞—Ö
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã
        for frame_file in frame_files:
            os.remove(os.path.join(frames_folder, frame_file))

        if not all_text.strip():
            print("  > [–ê–Ω—Ç–∏—Å–ø–æ–π–ª–µ—Ä] –¢–µ–∫—Å—Ç –Ω–∞ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if not GEMINI_API_KEY:
            print("  > [–ê–Ω—Ç–∏—Å–ø–æ–π–ª–µ—Ä] –ö–ª—é—á Gemini API –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑.")
            return None
            
        print("  > [–ê–Ω—Ç–∏—Å–ø–æ–π–ª–µ—Ä] –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ Gemini...")
        model = genai.GenerativeModel('gemini-pro')
        prompt = (f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Å –≤–∏–¥–µ–æ–∫–∞–¥—Ä–æ–≤. –ù–∞–π–¥–∏ —Ç–∞–π–º–∫–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ø–æ–π–ª–µ—Ä–æ–≤. "
                    f"–ò—â–∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ '—Å–ø–æ–π–ª–µ—Ä—ã –¥–æ', '–±–µ–∑ —Å–ø–æ–π–ª–µ—Ä–æ–≤ —Å', '—Ç–∞–π–º–∫–æ–¥—ã:'. "
                    f"–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Ç–∞–π–º–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú:–°–° –∏–ª–∏ –ß–ß:–ú–ú:–°–°. –ï—Å–ª–∏ —Ç–∞–π–º–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–∏ —Å–ª–æ–≤–æ 'null'.\n\n"
                    f"–¢–µ–∫—Å—Ç:\n{all_text}")
        response = model.generate_content(prompt)
        
        match = re.search(r'(\d{1,2}:\d{2}(?::\d{2})?)', response.text)
        if match:
            spoiler_time = match.group(1)
            print(f"  > [–ê–Ω—Ç–∏—Å–ø–æ–π–ª–µ—Ä] Gemini –Ω–∞—à–µ–ª —Ç–∞–π–º–∫–æ–¥: {spoiler_time}")
            return spoiler_time
        else:
            print("  > [–ê–Ω—Ç–∏—Å–ø–æ–π–ª–µ—Ä] Gemini –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–π–º–∫–æ–¥.")
            return None

    except Exception as e:
        print(f"  > [–ê–Ω—Ç–∏—Å–ø–æ–π–ª–µ—Ä] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

async def process_video_async(video_id, title):
    print("-" * 50)
    print(f"üé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ: {title}")
    video_url = f"https://www.youtube.com/watch?v={video_id}"
    video_parts_info = []
    spoiler_end_time = None # <-- –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

    try:
        # --- –®–ê–ì 1: –°–ö–ê–ß–ò–í–ê–ù–ò–ï ---
        print("  [1/4] –°–∫–∞—á–∏–≤–∞—é –ø–æ–ª–Ω–æ–µ –≤–∏–¥–µ–æ –≤ 480p...")
        temp_filepath_template = os.path.join(TEMP_FOLDER, f'{video_id}_full.%(ext)s')
        command_dl = [
            'yt-dlp', '--cookies', COOKIE_FILE, '--user-agent', 'Mozilla/5.0 ...',
            '--no-check-certificate', '-f', 'best[height<=480]', 
            '--output', temp_filepath_template, video_url
        ]
        subprocess.run(command_dl, check=True, timeout=900)
        
        full_filename = next((f for f in os.listdir(TEMP_FOLDER) if f.startswith(f"{video_id}_full")), None)
        if not full_filename: return None
        
        full_filepath = os.path.join(TEMP_FOLDER, full_filename)
        print("  ‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω.")

        # --- –®–ê–ì 2: –ê–ù–ê–õ–ò–ó –ù–ê –°–ü–û–ô–õ–ï–†–´ (–ù–û–í–´–ô!) ---
        spoiler_end_time = find_spoiler_time(full_filepath)

        # --- –®–ê–ì 3: –ù–ê–†–ï–ó–ö–ê ---
        print("  [3/4] –ù–∞—á–∏–Ω–∞—é –Ω–∞—Ä–µ–∑–∫—É...")
        chunk_filename_template = os.path.join(TEMP_FOLDER, f"{video_id}_part_%03d.mp4")
        subprocess.run(['ffmpeg', '-i', full_filepath, '-c', 'copy', '-map', '0', '-segment_time', str(CHUNK_DURATION_SECONDS), '-f', 'segment', '-reset_timestamps', '1', chunk_filename_template], check=True, timeout=900)
        os.remove(full_filepath)

        # --- –®–ê–ì 4: –ó–ê–ì–†–£–ó–ö–ê ---
        chunks = sorted([f for f in os.listdir(TEMP_FOLDER) if f.startswith(f"{video_id}_part_")])
        print(f"  ‚úÖ –ù–∞—Ä–µ–∑–∞–Ω–æ {len(chunks)} —á–∞—Å—Ç–µ–π. [4/4] –ó–∞–≥—Ä—É–∂–∞—é –≤ Telegram...")

        for i, chunk_filename in enumerate(chunks):
            chunk_filepath = os.path.join(TEMP_FOLDER, chunk_filename)
            part_title = f"{title} - –ß–∞—Å—Ç—å {i+1}"
            file_id = await upload_to_telegram(chunk_filepath, part_title)
            if file_id:
                video_parts_info.append({'part_num': i + 1, 'file_id': file_id})
            os.remove(chunk_filepath)
        
        if video_parts_info:
            print(f"üéâ –í–∏–¥–µ–æ '{title}' –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∫–æ–¥ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
            return {'id': video_id, 'title': title, 'parts': video_parts_info, 'spoiler_end_time': spoiler_end_time}
        
        return None
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è '{title}': {e}")
        return None

# --- –ö–æ–¥ main() –∏ if __name__ == '__main__' –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ "–∫—Ä–∞—Å–∏–≤–æ–π" –≤–µ—Ä—Å–∏–∏ ---
def main():
    if not os.path.exists(TEMP_FOLDER): os.makedirs(TEMP_FOLDER)
    if YOUTUBE_COOKIES_DATA:
        with open(COOKIE_FILE, 'w') as f: f.write(YOUTUBE_COOKIES_DATA)
        print("‚ÑπÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cookies.txt —Å–æ–∑–¥–∞–Ω.")
    else:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–µ–∫—Ä–µ—Ç YOUTUBE_COOKIES –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    try:
        print("\n" + "="*50); print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ (GitHub Actions —Å –ê–Ω—Ç–∏—Å–ø–æ–π–ª–µ—Ä–æ–º)"); print("="*50 + "\n")
        feed = feedparser.parse(YOUTUBE_CHANNEL_URL)
        if not feed.entries: return
        db = get_video_db()
        existing_ids = {video['id'] for video in db}
        new_videos_to_process = [{'id': e.yt_videoid, 'title': e.title} for e in feed.entries if e.yt_videoid not in existing_ids]
        if not new_videos_to_process:
            print("‚úÖ –ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); return
        print(f"üî• –ù–∞–π–¥–µ–Ω–æ {len(new_videos_to_process)} –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        processed_videos = []
        for video_info in reversed(new_videos_to_process):
            result = asyncio.run(process_video_async(video_info['id'], video_info['title']))
            if result: processed_videos.append(result)
            time.sleep(5)
        if processed_videos:
            final_db = processed_videos + db
            while len(final_db) > MAX_VIDEOS_ENTRIES: final_db.pop()
            save_video_db(final_db)
            print("\n" + "="*50); print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö videos.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."); print("="*50)
    finally:
        if os.path.exists(COOKIE_FILE):
            os.remove(COOKIE_FILE); print("‚ÑπÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª cookies.txt —É–¥–∞–ª–µ–Ω.")

if __name__ == '__main__':
    main()
